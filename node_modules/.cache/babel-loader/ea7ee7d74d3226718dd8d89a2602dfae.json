{"ast":null,"code":"var _jsxFileName = \"/Users/javierbizama/Desktop/React apps/websockets-t3/src/App.js\";\nimport React from 'react';\nimport io from 'socket.io-client';\nimport { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BarChart, Bar, Line, LineChart, XAxis, YAxis, Tooltip } from 'recharts';\nvar button = document.getElementsByTagName(\"button\");\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n}); //Funcion para cerrar y abrir conexion al socket \n\nfunction cerrar_conexion() {\n  if (socket.connected) {\n    console.log('Desactivando conexion');\n    socket.close();\n  } else {\n    console.log('Activando conexion');\n    socket.connect();\n  }\n}\n\n; //Definir una funcion para que cree graficos dependiendo de la info del stock\n//Pensar en como distribuir los datos que me llegan. \n\nfunction App() {\n  const [data_updates, updateData] = useState([]);\n  const [data_buy, buyData] = useState([]);\n  const [data_sell, sellData] = useState([]); // Listen de event and update the state\n\n  useEffect(() => {\n    socket.on('UPDATE', data_updates => {\n      updateData(updatesdata => [...updatesdata, data_updates]);\n      console.log(data_updates.ticker);\n    });\n    socket.on('BUY', data_buy => {\n      buyData(buydata => [...buydata, data_buy]);\n    });\n    socket.on('SELL', data_sell => {\n      sellData(selldata => [...selldata, data_sell]);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 6\n    }\n  }, \"Hola Programa\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: cerrar_conexion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 6\n    }\n  }, \" Server Conectado \"), /*#__PURE__*/React.createElement(LineChart, {\n    width: 500,\n    height: 300,\n    data: data_variable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    dataKey: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })));\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/javierbizama/Desktop/React apps/websockets-t3/src/App.js"],"names":["React","io","useEffect","useState","ReactDOM","BarChart","Bar","Line","LineChart","XAxis","YAxis","Tooltip","button","document","getElementsByTagName","socket","path","cerrar_conexion","connected","console","log","close","connect","App","data_updates","updateData","data_buy","buyData","data_sell","sellData","on","updatesdata","ticker","buydata","selldata","data_variable"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACEC,QADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,SAJF,EAKEC,KALF,EAMEC,KANF,EAOEC,OAPF,QAQO,UARP;AAWA,IAAIC,MAAM,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,QAA9B,CAAb;AACA,MAAMC,MAAM,GAAGd,EAAE,CAAC,gCAAD,EAAmC;AAClDe,EAAAA,IAAI,EAAE;AAD4C,CAAnC,CAAjB,C,CAIA;;AACA,SAASC,eAAT,GAA2B;AACzB,MAAIF,MAAM,CAACG,SAAX,EAAqB;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAL,IAAAA,MAAM,CAACM,KAAP;AACD,GAHD,MAII;AACFF,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAL,IAAAA,MAAM,CAACO,OAAP;AACD;AACF;;AAAA,C,CAED;AAEA;;AAOA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,YAAD,EAAeC,UAAf,IAA6BtB,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACuB,QAAD,EAAWC,OAAX,IAAsBxB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACyB,SAAD,EAAYC,QAAZ,IAAwB1B,QAAQ,CAAC,EAAD,CAAtC,CAJa,CAKb;;AACAD,EAAAA,SAAS,CAAC,MAAK;AACba,IAAAA,MAAM,CAACe,EAAP,CAAU,QAAV,EAAoBN,YAAY,IAAI;AAClCC,MAAAA,UAAU,CAACM,WAAW,IAAI,CAAC,GAAGA,WAAJ,EAAiBP,YAAjB,CAAhB,CAAV;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,YAAY,CAACQ,MAAzB;AACD,KAJD;AAKAjB,IAAAA,MAAM,CAACe,EAAP,CAAU,KAAV,EAAiBJ,QAAQ,IAAI;AAC3BC,MAAAA,OAAO,CAACM,OAAO,IAAI,CAAC,GAAGA,OAAJ,EAAaP,QAAb,CAAZ,CAAP;AACD,KAFD;AAGAX,IAAAA,MAAM,CAACe,EAAP,CAAU,MAAV,EAAkBF,SAAS,IAAI;AAC7BC,MAAAA,QAAQ,CAACK,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcN,SAAd,CAAb,CAAR;AACD,KAFD;AAGD,GAZQ,EAYL,EAZK,CAAT;AAeA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE;AAAQ,IAAA,OAAO,EAAIX,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF,eAGE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,GAAlB;AAAuB,IAAA,MAAM,EAAE,GAA/B;AAAoC,IAAA,IAAI,EAAEkB,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAEG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,eAGG,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHH,CAHF,CADD;AAWE;;AAAA;AAEJ,eAAeZ,GAAf","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\nimport { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BarChart,\n  Bar,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip\n} from 'recharts';\n\n\nvar button = document.getElementsByTagName(\"button\");\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\n//Funcion para cerrar y abrir conexion al socket \nfunction cerrar_conexion() {\n  if (socket.connected){\n    console.log('Desactivando conexion');\n    socket.close();\n  }\n  else{\n    console.log('Activando conexion');\n    socket.connect();\n  }\n};\n\n//Definir una funcion para que cree graficos dependiendo de la info del stock\n\n//Pensar en como distribuir los datos que me llegan. \n\n\n\n\n\n\nfunction App() {\n\n  const [data_updates, updateData] = useState([]); \n  const [data_buy, buyData] = useState([]);\n  const [data_sell, sellData] = useState([]);\n  // Listen de event and update the state\n  useEffect(()=> {\n    socket.on('UPDATE', data_updates => {\n      updateData(updatesdata => [...updatesdata, data_updates]);\n\n      console.log(data_updates.ticker);\n    })\n    socket.on('BUY', data_buy => {\n      buyData(buydata => [...buydata, data_buy]);\n    })\n    socket.on('SELL', data_sell => {\n      sellData(selldata => [...selldata, data_sell]);\n    })\n  },  []);\n\n\n  return (\n   <div>\n     <h1>Hola Programa</h1>\n     <button onClick = {cerrar_conexion}> Server Conectado </button>\n     <LineChart width={500} height={300} data={data_variable}>\n        <XAxis dataKey=\"time\" />\n        <YAxis />\n        <Line dataKey=\"value\" />\n      </LineChart>\n     \n   </div>\n  )};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}